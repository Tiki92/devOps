---

- name: Upgrade all packages
  yum:
    name: '*'
    state: latest

- name: Install packages 
  yum:
    name: "{{ item }}"
    state: present
  loop:
    - docker
    - git
    - python3
    - python-pip
    - "{{java.VERSION}}"

- name: Copy credentials
  copy:
    src: "{{ home_dir }}/.aws"
    dest: /home/jenkins/
    owner: jenkins
    group: jenkins
    mode: '0644'

- name: Install boto, boto3
  pip:
    name: "{{ item }}"
    executable: pip-3.7
  loop:
    - boto==2.38.0
    - boto3
    - botocore==1.15.34

- name: Install boto, boto3
  pip:
    name: "{{ item }}"
  loop:
    - boto==2.38.0
    - boto3
    - botocore==1.15.34
    

- name: Install ansible, python-jenkins
  pip:
    name: "{{ item }}"
    executable: pip3
  loop:
    - ansible
    - python-jenkins

- name: Instace IP
  cloudformation_info:
    stack_name: ansible-cloudformation
  register: output
  become: false
  
- name: accept new ssh fingerprints
  become: false                                         
  shell: ssh-keyscan -H {{ output.cloudformation["ansible-cloudformation"].stack_outputs.HostIp }} >> ~/.ssh/known_hosts

- name: Start Docker
  service:
    name: docker
    state: started

- name: Add user ec2-user to docker group
  user:
    name: ec2-user
    groups: docker
    append: yes

- name: Add user jenkins to docker group
  user:
    name: jenkins
    groups: docker
    append: yes

- name: Download Docker-Compose
  get_url:
    url: https://github.com/docker/compose/releases/download/1.25.1-rc1/docker-compose-Linux-x86_64
    dest: /usr/local/bin/docker-compose
    mode: 766

- name: Create symlink to docker-compose
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link

- name: Give execute permissions /usr/local/bin/docker-compose
  file:
    dest: /usr/local/bin/docker-compose
    mode: a+x

- name: Get home directory
  set_fact:
    home_dir: "{{ lookup('env', 'HOME') }}"

- name: Copy privatekey
  authorized_key:
    user: jenkins
    state: present
    key: "{{ lookup('file', '{{ home_dir }}/.ssh/id_rsa.pub') }}"

- name: Copy pubkey
  copy:
    src: "{{ home_dir }}/.ssh/id_rsa.pub"
    dest: /home/jenkins/.ssh/
    owner: jenkins
    group: jenkins
    mode: '0644'

- name: Copy rsakey
  copy:
    src: "{{ home_dir }}/.ssh/id_rsa"
    dest: /home/jenkins/.ssh/
    owner: jenkins
    group: jenkins
    mode: '0600'

- name: Correct the alternatives to change default Java version.
  alternatives:
    name: java
    link: /bin/java
    path: "{{java.ALTERNATIVES}}"

- name: Download Jenkins repo yum URL for  
  get_url:
    url: "{{jenkins.repo_URL}}"
    dest: /etc/yum.repos.d/jenkins.repo
  become: true

- name: Import GPG Key
  rpm_key:
    state: present
    key: "{{jenkins.gpg_key}}"

- name: Install Jenkins
  yum:
    name: jenkins
    state: present

- name: Change Jenkins JAVA options
  lineinfile: 
    dest=/etc/sysconfig/jenkins
    regexp=^JENKINS_JAVA_OPTIONS=
    line=JENKINS_JAVA_OPTIONS="{{jenkins.JAVA_OPTIONS}}"
  become: true

- name: Start Jenkins service and enable on boot
  service:
    name: jenkins
    state: started
    enabled: yes

- name: Wait for connection
  wait_for_connection:
    delay: 7
    timeout: 90

- name: Jenkins authenticate
  uri:
    url: 'http://{{ output.cloudformation["ansible-cloudformation"].stack_outputs.ControllerIp }}/crumbIssuer/api/xml?xpath=concat(//crumbRequestField,":",//crumb)'
    user: admin
    password: admin
    force_basic_auth: yes
    return_content: yes
  register: crumb

- name: Create Jenkins credentials
  uri:
    method: POST
    url: 'http://{{ output.cloudformation["ansible-cloudformation"].stack_outputs.ControllerIp }}:8080/credentials/store/system/domain/_/createCredentials'
    user: admin
    password: admin
    force_basic_auth: yes
    headers:
      Jenkins-Crumb: "{{ crumb.content.split(':')[1] }}"
    body: |
      json={
        "": "0",
        "credentials": {
          "scope": "GLOBAL",
          "id": "12",
          "username": "admin",
          "password": "assist1234",
          "description": "My new credentials",
          "$class": "com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl"
        }
      }

- name: Install plugins
  jenkins_plugin:
    name: "{{ item }}"
    state: present
  loop:
    - docker-compose-build-step
    - ansible
    - git
  register: result_plg
  until: result_plg is success
  retries: 3
  delay: 3

- name: Create a directory if it does not exist
  file:
    path: /var/lib/jenkins/workspace/
    state: directory
    owner: jenkins
    group: jenkins
    mode: '0755'

- name: Create jenkins job
  jenkins_job:
    config: "{{ lookup('file', '../../../ansible/jenkins_job/config.xml') }}"
    name: devOps
    url: 'http://localhost:8080'

- name: Restart service jenkins
  service:
    name: jenkins
    state: restarted
